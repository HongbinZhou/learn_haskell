
* encoding
[2015-09-07 Mon 21:43]
ref: http://blog.chinaunix.net/uid-20788752-id-484608.html
** ASCII
ref: http://www.ascii-codes.com/
- Range: 0-127 (0x00 - 0x7f), 1 Byte
- 前32个是控制字符
- 128-255是扩展的ASCII, 就是所谓的: cp437
  http://www.perlmonks.org/bare/?node_id=300809
  On the page that you cite ("www.asciitable.com"), the "extended
  ASCII set" listed there is actually known as "PC Code Page 437" (or
  "cp437"), which was developed for the original IBM PCs running
  MS-DOS, was inherited by virtually all IBM clones, and is therefore
  arguably "the most popular" (as asserted on that page). 
** Unicode
https://en.wikipedia.org/wiki/Universal_Character_Set_characters
http://jrgraphix.net/research/unicode_blocks.php
- Universal Character Set (UCS), 符号集，每一个符号有自己的编码, 例如：
  | symble | unicode |
  | 严     | U+4E25  |
  | A      | U+0041  |
- BOM, Byte order mark, U+FEFF, 大端顺序: 0xfe, 0xff, 小端顺序: 0xff,
  0xfe, UTF-8为3字节:EF BB BF
  
  BOM i.e. ZERO WIDTH NO-BREAK SPACE

utf-8 是unicode的一种保存形式
** UTF-8
- 8 bits Unicode Transformation Format, 一字节, 是unicode的一种编码方
  式
- range: 
  | Unicode range             | UTF-8                                     | Bytes | Note                             |
  | 0x0000_0000 - 0x0000_007f | 0b0xxx_xxxx                               |     1 | 与ASCII一致                      |
  | 0x0000_0080 - 0x0000_07ff | 0b110x_xxxx_10xx_xxxx                     |     2 | 最大值0x7ff需要11bits, 对应11个x |
  | 0x0000_8000 - 0x0000_ffff | 0b1110_xxxx_10xx_xxxx_10xx_xxxx           |     3 |                                  |
  | 0x0000_0000 - 0x0010_ffff | 0b1111_0xxx_10xx_xxxx_10xx_xxxx_10xx_xxxx |     4 |                                  |
- 怎样由unicode得到UTF-8?
  1. 首先看unicode属于上面哪个范围，确定字节数
  2. 从unicode的LSB开始，取6位，在结果前补"10", 走到最高Byte.
  3. 最高Byte以1开始，1的个数是Byte的个数，1后紧接一个0

** GB2312
http://www.knowsky.com/resource/gb2312tbl.htm
- 使用2个字节表示一个汉字，可以表示2^^16 = 65536 个符号. 高位字节是“区
  字节”， 低位字节是“位字节”。 
- 区位号与编码的转换：“高位字节”使用了0xA1-0xF7(把01-87区的区号加上
  0xA0)，“低位字节”使用了0xA1-0xFE(把01-94加上 0xA0)。 

  如“啊”在GB2312是区位码是1601, 编码是0xB0A1
** GBK
- 比GB2312新，但向下兼容GB2312
- GBK编码，是在GB2312-80标准基础上的内码扩展规范，使用了双字节编码方案，
  其编码范围从8140至FEFE（剔除xx7F），共23940个码位，共收录了21003个汉
  字，完全兼容GB2312-80标准，支持国际标准ISO/IEC10646-1和国家标准
  GB13000-1中的全部中日韩汉字，并包含了BIG5编码中的所有汉字。
- 从GB字库扩充到GBK字库，增加了1万4千多字。
- range:
  1. 汉字区。
     a. GB 2312 汉字区, 即 GBK/2: B0A1-F7FE。收录 GB 2312 汉字 6763 个，
        按原顺序排列。
     b. GB 13000.1 扩充汉字区, 
        - GBK/3: 8140-A0FE。收录 GB 13000.1 中的 CJK 汉字 6080 个。
        - GBK/4: AA40-FEA0。收录 CJK 汉字和增补的汉字 8160 个。
  2. 图形符号区
  3. 用户自定义区
** cp437: 扩展的ASCII, 128-255 

* What is Monoid?
[2015-08-28 Fri 22:34]

ref:
comment17774
http://book.realworldhaskell.org/read/writing-a-library-working-with-json-data.html


A monoid is a set of things which you can put together, in such a way
that two conditions hold. Let's be a bit more precise: a set S with a
binary operation <> is a monoid if the following are true:

1) There must be some thing called the "identity", which you can
   combine with any other thing x and get x back. So y is an identity
   if yx = xy = x for any x in S.

2) The operation <> must be "associative", which basically means we
   can just write x <> y <> z without needing parentheses. Precisely,
   it means (x <> y) <> z = x <> (y <> z) for any x,y,z in S.

Some classic examples:

a) The set of integers (..., -1, 0, 1, 2, ...) are a monoid when <> is
   addition (so <> is +), where 0 is the identity element.

b) The integers are also a monoid when <> is multiplication, with 1 as
   the identity.

c) Lists are a monoid with the operation of concatenation (so <> is ++
   in Haskell) where the identity is the empty list []

Note this means strings are as well, with "" as the identity.
